- What happens when you initialize a repository? Why do you need to do it?

Whe we initialize a repository, Git transforms a normal directory in a repository, 
adding a .git folder. After that, no commit was done yet. We need to
do it because it the .git folder stores all the information.

- How is the staging area different from the working directory and the repository?
- What value do you think it offers?

The staging area is different from the working directory and the repository, because
the itens in the staging area are to be commited. The itens in the repository 
already have been commited and not all itens in the working directory are commited itens.

- How can you use the staging area to make sure you have one commit per logical change?

We can use the staging area to add only the files that correspond to a logical change 
and commit these files.

- What are some situations when branches would be helpful in keeping your history 
- organized? How would branches help? 

Branches are helpful when we decide to change our project in a way that may or may not
be added to the project at the end. They help when we split our project and we can work
on both of them separately.

- How do the diagrams help you visualize the branch structure?
Diagrams help to viasualize the branch structure showing that the structure
is not linear. This way we can see better the branches and the commits that are not
acessible.

- What is the result of merging two branches together? Why do we represent it in 
- the diagram the way we do?

Merging two branches together is putting the chenges made in one branch on another,
resulting in a commit with two fathers. We represent that way because it contains 
info from both branches and it makes sense.

- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros: add or remove without conflict code automaticaly
con: cant resolve conflict alone. This way its necessary to merge manually